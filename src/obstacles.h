#ifndef OBSTACLES_H
#define OBSTACLES_H

/* Import the required game headers (third party libraries) */
#include "raylib.h"

/* Defines the islands sphere's radius */
#define MAX_ISLAND_RADIUS 24
/* Defines the maximum number of generated Islands */
#define MAX_ISLANDS 15
/* Defines the minimum number of generated Islands */
#define MIN_ISLANDS 5

/* Defines the maximum height of a Rock */
#define MAX_ROCK_HEIGHT 20
/* Defines the maximum number of generated Rocks */
#define MAX_ROCKS 12
/* Defines the minimum number of generated Rocks */
#define MIN_ROCKS 4

/* Island structure */
typedef struct {
    int radius; //radius of island instance (islands are treated as spheres)
    Vector3 center_pos; //position of center of island sphere
    Texture2D sand_tex; //sand texture to be applied to the island's model
    //https://sketchfab.com/3d-models/low-poly-palm-tree-58f448209beb43659e95ca0e1ad59ac2
    Model palm_tree; //model for the palm tree that is to be atop the island.
    Model island_sphere; //the model for the island, generated by GenMeshSphere();
} Island;

/* Rock structure */
typedef struct {
    int height; //height if parallelepiped, radius if sphere
    int model_coefficient; //random value to alter rock's width and depth so they vary from its height
    Vector3 center_pos; //position of center of island
    Vector3 rotation_vec; //vector3 that randomly rotates the rock if its a parallelepiped.
    Model model; //model, either from GenMeshCube() or GenMeshSphere()
    Texture2D rock_tex; //texture to be applied to model
    int geometry_id; //id determining whether rock is a sphere or parallelepiped.
} Rock;

/* Obstacles structure */
typedef struct {
    //unifying obstacle struct that contains all data about obstacles
    Island* island_list; //list of islands
    int island_count; //number of islands
    Rock* rock_list; //list of rocks
    int rock_count; //number of rocks
} Obstacles;

/* Function declarations */
Island CreateIsland(Texture2D sand_tex, Model toppings, Vector2 corner_bound, Vector2 opp_corner_bound);
Island* CreateAllIslands(Texture2D sand_tex, Model toppings, Vector2 corner_bound, Vector2 opp_corner_bound, int island_count);

Rock CreateRock(Texture2D rock_tex, Vector2 corner_bound, Vector2 opp_corner_bound);
Rock* CreateAllRocks(Texture2D rock_tex, Vector2 corner_bound, Vector2 opp_corner_bound, int rock_count);

Obstacles CreateObstactlesInstance(Island* island_list, int island_count, Rock* rock_list, int rock_count);

Obstacles init_obs(Texture2D sand_tex, Texture2D rock_tex, Model palm_tree);

#endif //OBSTACLES_H  
